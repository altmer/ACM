#include <iostream>
#include <sstream>
#include <fstream>
#include <cstdio>
#include <cstring>
#include <string>
#include <vector>
#include <cmath>
#include <bitset>
#include <list>
#include <functional>
#include <queue>
#include <stack>
#include <algorithm>
#include <numeric>
#include <map>
#include <set>
using namespace std;

enum PATH {NORTH, SOUTH, WEST, EAST};
int dx[4]={-1,1,0,0};
int dy[4]={0,0,-1,1};

class Piece
{
public:
	int locX, locY;
	int destX, destY;
	int color, ord,dist;
	Piece():locX(0),locY(0),destX(-1),destY(-1),color(0), ord(-1),dist(0){}
	Piece(int x, int y, int col) :locX(x),locY(y),destX(-1),destY(-1),color(col), ord(-1),dist(0){}
};
class cmp
{
public:
	bool operator () (Piece* const& t1,Piece* const& t2){
		if (t1->ord==t2->ord)
			return t1->dist>t2->dist;
		return t1->ord<t2->ord;
	}
};
class PieceMover
{
public:
	int n;
	vector <vector <int> > plan;
	vector <vector <Piece> > base;
	vector <vector <Piece*> > grid;
	vector <string> ans;
	multiset<Piece*, cmp> q;
	ostringstream oss;
	bool bh;

	bool check_bord(const int& x, const int& y)
	{
		return x>=0 && x<n && y>=0 &&y<n;
	}
	void getInput (vector <string>& board)
	{
		// input
		for (int i=0; i<n; ++i){
			for (int j=0; j<n; ++j){
				if (board[i][j]!='0'){
					int col=board[i][j]-'0'-1;
					base[col].push_back(Piece(i,j,col));
					int l=base[col].size()-1;
					grid[i][j]=&base[col][l];
				}
			}
		}
	}

	void findCenter (int col, int& cx, int& cy)
	{
		int bestx=-1;
		int besty=-1;
		int bestdist=1e+9;
		for (int i=0; i<n; ++i){
			for (int j=0; j<n; ++j){
				if (!plan[i][j]){
					int cur=0;
					for (int k=0; k<base[col].size(); ++k){
						cur+=abs(base[col][k].locX-i)+abs(base[col][k].locY-j);
					}
					if (cur<bestdist){
						bestx=i;
						besty=j;
						bestdist=cur;
					}
				}
			}
		}
		cx=bestx;
		cy=besty;
	}

	void stepX (Piece& p, int ddx){
		grid[p.locX+ddx][p.locY]=&p;
		grid[p.locX][p.locY]=NULL;
		if (ddx>0)
			oss << p.locX << " " << p.locY << " " << "SOUTH";
		else
			oss << p.locX << " " << p.locY << " " << "NORTH";
		p.locX+=ddx;
		ans.push_back(oss.str());
		oss.str("");
	}

	void stepY (Piece& p, int ddy){
		grid[p.locX][p.locY+ddy]=&p;
		grid[p.locX][p.locY]=NULL;
		if (ddy>0)
			oss << p.locX << " " << p.locY << " " << "EAST";
		else
			oss << p.locX << " " << p.locY << " " << "WEST";
		p.locY+=ddy;
		ans.push_back(oss.str());
		oss.str("");
	}

	void getPlan()
	{
		for (int col=0; col<base.size(); ++col){
			if (!base[col].empty()){
				int cx, cy;
				findCenter(col, cx, cy);
				// assignment
				list <pair <int, int> > cand;
				list <pair <int, int> >::iterator it;
				cand.push_back(make_pair(cx,cy));
				int ass=0;
				int toass=base[col].size();
				while (ass<toass){
					int cur=1e+9;
					int from=-1;
					list <pair <int, int> >::iterator wher=cand.end();
					//searching
					for (int i=0; i<toass; ++i){
						if(base[col][i].destX==-1){
							for (it=cand.begin(); it!=cand.end(); ++it){
								int tmp=abs(base[col][i].locX-it->first)+abs(base[col][i].locY-it->second);
								if (tmp<cur){
									cur=tmp;
									from=i;
									wher=it;
								}
							}
						}
					}
					//assigning
					++ass;
					base[col][from].destX=wher->first;
					base[col][from].destY=wher->second;
					base[col][from].ord=abs(base[col][from].destX-cx)+abs(base[col][from].destY-cy);
					base[col][from].dist=abs(base[col][from].destX-base[col][from].locX)+abs(base[col][from].destY-base[col][from].locY);
					plan[wher->first][wher->second]=col+1;
					// candidates
					for (int i=0; i<4; ++i){
						int x=wher->first+dx[i];
						int y=wher->second+dy[i];
						if (check_bord(x,y)&&!plan[x][y])
							cand.push_back(make_pair(x,y));
					}
					cand.erase(wher);
				}
			}
		}
	}

	void moveOutY (Piece& p)
	{
		if (check_bord(p.locX,p.locY-1)&&grid[p.locX][p.locY-1]==NULL){
			stepY(p, -1);
		}
		else if (check_bord(p.locX,p.locY+1)&&grid[p.locX][p.locY+1]==NULL){
			stepY(p, 1);
		}
	}

	void moveOutX (Piece& p)
	{
		if (check_bord(p.locX-1,p.locY)&&grid[p.locX-1][p.locY]==NULL){
			stepX(p,-1);
		}
		else if (check_bord(p.locX+1,p.locY)&&grid[p.locX+1][p.locY]==NULL){
			stepX(p,1);
		}
	}

	void bfs_handle (Piece& p)
	{
		vector <vector <bool> > vis(n,vector<bool>(n,false));
		vector <vector <pair <int, int> > > par (n, vector <pair<int,int> >(n,make_pair(-1,-1)));
		queue <pair <int, int> > que;
		pair <int, int> u=make_pair(p.locX,p.locY);
		vis[u.first][u.second]=true;
		que.push(u);
		while (!que.empty()){
			u=que.front();
			que.pop();
			for (int i=0; i<4; ++i){
				if (check_bord(u.first+dx[i],u.second+dy[i])&&grid[u.first+dx[i]][u.second+dy[i]]==NULL && !vis[u.first+dx[i]][u.second+dy[i]]){
					vis[u.first+dx[i]][u.second+dy[i]]=true;
					par[u.first+dx[i]][u.second+dy[i]]=u;
					que.push(make_pair(u.first+dx[i],u.second+dy[i]));
				}
			}
		}
		if (vis[p.destX][p.destY]){
			bh=true;
			pair <int, int> cur(p.destX,p.destY);			
			stack <pair <int, int> > parents;
			while (cur.first!=-1){
				parents.push(cur);
				cur=par[cur.first][cur.second];
			}
			parents.pop();
			while (!parents.empty()){
				cur=parents.top();
				parents.pop();
				if (cur.first!=p.locX)
					stepX(p, cur.first-p.locX);
				else if (cur.second!=p.locY){
					stepY(p,cur.second-p.locY);
				}
			}
		}
		else{
			// find closest
			if (!bh){
				bh=true;
				int curd=1e+9;
				pair <int, int> cur(p.locX,p.locY);
				for (int i=0; i<n; ++i){
					for (int j=0; j<n; ++j){
						if (vis[i][j]){
							int t=abs(i-p.destX)+abs(j-p.destY);
							if (t<curd){
								curd=t;
								cur=make_pair(i,j);
							}
						}
					}
				}
				stack <pair <int, int> > parents;
				while (cur.first!=-1){
					parents.push(cur);
					cur=par[cur.first][cur.second];
				}
				parents.pop();
				while (!parents.empty()){
					cur=parents.top();
					parents.pop();
					if (cur.first!=p.locX)
						stepX(p, cur.first-p.locX);
					else if (cur.second!=p.locY){
						stepY(p,cur.second-p.locY);
					}
				}

			}
			else{///////////////////
				u=u;
			}			
		}
	}
	void movePiece(Piece& p)
	{
		bool fin=false;
		int ddx=p.destX-p.locX;
		if (ddx)
			ddx/=abs(ddx);
		int ddy=p.destY-p.locY;
		if(ddy)
			ddy/=abs(ddy);
			// can I... ?
		if (ddx && check_bord(p.locX+ddx, p.locY)&&grid[p.locX+ddx][p.locY]==NULL){
			// move it!
			stepX(p, ddx);
			fin=true;
		}
		else if (ddy && check_bord(p.locX, p.locY+ddy)&&grid[p.locX][p.locY+ddy]==NULL){
			// move it!
			stepY(p,ddy);
			fin=true;
		}
		else if(ddx && check_bord(p.locX+ddx, p.locY)){
			if ((grid[p.locX+ddx][p.locY]->destX-grid[p.locX+ddx][p.locY]->locX)*ddx>0 
				|| grid[p.locX+ddx][p.locY]->destY-grid[p.locX+ddx][p.locY]->locY!=0){
				movePiece(*grid[p.locX+ddx][p.locY]);
				if (grid[p.locX+ddx][p.locY]==NULL){
					stepX(p,ddx);
					fin=true;
				}
			}
		}
		else if (ddy && check_bord(p.locX, p.locY+ddy)){
			if ((grid[p.locX][p.locY+ddy]->destY-grid[p.locX][p.locY+ddy]->locY)*ddy>0 
				|| grid[p.locX][p.locY+ddy]->destX-grid[p.locX][p.locY+ddy]->locX!=0){
				movePiece(*grid[p.locX][p.locY+ddy]);
				if (grid[p.locX][p.locY+ddy]==NULL){
					stepY(p, ddy);
					fin=true;
				}
			}
		}
		if (!fin){
			// another way, may I go through?
			if (ddx&&check_bord(p.locX+ddx, p.locY)){
				q.insert(grid[p.locX+ddx][p.locY]);
				moveOutY(*grid[p.locX+ddx][p.locY]);
				if (grid[p.locX+ddx][p.locY]==NULL){
					stepX(p,ddx);
					return;
				}
			}
			else if (ddy&&check_bord(p.locX, p.locY+ddy)){
				q.insert(grid[p.locX][p.locY+ddy]);
				moveOutX(*grid[p.locX][p.locY+ddy]);
				if (grid[p.locX][p.locY+ddy]==NULL){
					stepY(p,ddy);
					return;
				}
			}
			// bfs
			bfs_handle(p);
			return;
		}
		// end of movePiece
	}

	vector <string> getMoves(vector <string> board)
	{
		n=board.size();
		base.resize(4);
		for (int i=0; i<base.size(); ++i){
			base[i].reserve(10000);
		}
		plan.assign(n, vector<int>(n, 0));
		grid.assign(n, vector<Piece*>(n));

		getInput(board);

		getPlan();

		for (int i=0; i<4; ++i){
			for (int j=0; j<base[i].size(); ++j){
				if (base[i][j].destX!=base[i][j].locX||base[i][j].destY!=base[i][j].locY)
					q.insert(&base[i][j]);
			}
		}
		while (!q.empty()){
			bh=false;
			Piece* ptr=*q.begin();
			q.erase(q.begin());
			while (ptr->destX!=ptr->locX || ptr->destY!=ptr->locY){
				movePiece(*ptr);
			}
		}
		return ans;
	}
};

PieceMover solve;
vector <string> inp;
string s;

int main (void)
{
	ifstream fin("input.txt");
	getline (fin, s);
	inp.push_back(s);
	for (int i=1; i<inp[0].size(); ++i){
		getline (fin, s);
		inp.push_back(s);
	}
	inp=solve.getMoves(inp);

	for (int i=0; i<inp.size(); ++i){
		cout << inp[i] << endl;
//		cout.flush();
	}
	
	return 0;
}